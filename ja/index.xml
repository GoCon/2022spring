<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Go Conference 2022 Spring</title>
    <link>https://gocon.jp/2022spring/ja/</link>
    <description>Recent content in Home on Go Conference 2022 Spring</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language><atom:link href="https://gocon.jp/2022spring/ja/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/8kka/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/8kka/</guid>
      <description>株式会社QualiArtsでバックエンドエンジニアとして働いています。 所属プロジェクトのゲームAPIやインフラ構築をメインに開発を行いつつ、その他複数のプロジェクトや社内ツールのインフラ管理も行っています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/__syumai/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/__syumai/</guid>
      <description>Go Language Specification輪読会主催。Go経験3年程度のWebプログラマです。 Go言語の現在の仕様や、今後の仕様について興味を持っています。 普段はTypeScript、Reactを使ったフロントエンドの開発も行っています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/_pongzu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/_pongzu/</guid>
      <description>Hi, I am pongzu, working at Kanmu as software engineer </description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/awakot_56/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/awakot_56/</guid>
      <description>株式会社Voicyに所属するエンジニアです。 音声サービスの裏側をバックエンドからインフラまで幅広く開発をした後に、今はSREを担当しています。 Go言語が好きです！</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/budougumi0617/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/budougumi0617/</guid>
      <description>Backend engineer in Japanese. I love Go and Oyster.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/convto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/convto/</guid>
      <description>低レイヤや暗号関連の技術に興味があります</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/glassmonekey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/glassmonekey/</guid>
      <description>Go歴は1年半ぐらいです。業務では他にもPHP, Python, vue (TypeScript)を書いています。趣味はFlutterでのアプリ開発です。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/hgsgtk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/hgsgtk/</guid>
      <description>Backend Engineer at Autify. I enjoy crafting effective test automation experiences and specialize in the back-end area and mainly develop in Go and Ruby language in my current position.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/hideyuki_utsunomiya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/hideyuki_utsunomiya/</guid>
      <description>株式会社バニッシュ・スタンダードでエンジニアとして働いています。バックエンドからフロントエンドまで担当しています。今はGoを書いていますが、前職ではScalaやAngularを書いていました。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/hikyaru_suzuki/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/hikyaru_suzuki/</guid>
      <description>株式会社サイバーエージェントに新卒入社し、その子会社である株式会社QualiArtsでゲーム開発のバックエンドエンジニアとして働いています。普段はゲームを開発行っていますが、既存プロジェクトの改善、共通システムの管理、社内サービスの開発、共有ツールの構築・運用など幅広くエンジニアリングをしています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/jespinog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/jespinog/</guid>
      <description>I&amp;rsquo;m an Open Source and software development enthusiast. I love writing code and contribute to Open Source project, and I have the privilege of being one of the starters or contributors in some interesting Open Source projects like Taiga, Penpot, Mattermost or Focalboard. I&amp;rsquo;m a big fan of learning new things, specially programming languages. I love Rust, Go, Python and Clojure, and love to deep dive into technical details.
Currently I&amp;rsquo;m working mainly in Go and Typescript in Mattermost, and I keep trying to contribute to open source project whenever I can.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/kazuhisa_takei/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/kazuhisa_takei/</guid>
      <description> モンスターストライクというスマホゲームのサービス開始時にサーバサイドをほぼ一人で開発構築をした モンスターストライクのおかげで padrino という ruby のweb application framework の世界最大事例をつくってしまった モンスターストライクのマルチプレイサーバを0から1ヶ月で用意した Vline Linux というlinux distiibution の開発メインメンバーの一人でもあったことがあった 現在はスマホゲーム開発をしている  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/lestrrat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/lestrrat/</guid>
      <description>牧大輔(lestrrat) - peco の開発責任者。Go/Perl/Cプログラマであり、登壇や執筆をこなす傍らパンを焼いている。元YAPC::Asia Tokyo主催、元builderscon主催。3児の父。株式会社メルカリ所属。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/luccafort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/luccafort/</guid>
      <description>TL;DR Hi there 👋 i&amp;rsquo;m backend engineer and tech-pr, i live in Kyoto, Japan. i love Ruby, Golang, PHP and TypeScript! i manage kyoto.go, that is local community of golang, if you have interest, come on join us!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/makki_d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/makki_d/</guid>
      <description>KLab株式会社 エンジニアリングマネージャー</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/mururururu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/mururururu/</guid>
      <description> CTO at Kanmu, Inc  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/norinoriki0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/norinoriki0/</guid>
      <description>株式会社ビットキーで、bitkey platform の開発をしています。Kubernetes, Go, 物理学, 数学が好きです。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/nsega/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/nsega/</guid>
      <description>Software Engineer. I have mainly developed the service with GCP, Go, and Kubernetes. I will challenge new things I have never experienced to create good products based on the technology(cloud-native app, microservices). I am eager to keep trying the new challenge and more responsibility because I can contribute more to grow good products. My hobby is scuba diving. My favorite motto is &amp;ldquo;Do or do not, there is no &amp;lsquo;try.&#39;&amp;rdquo;, the master Yoda quote.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/rennnosuke_rk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/rennnosuke_rk/</guid>
      <description>software engineer: @eureka_inc
 GitHub: http://github.com/rennnosuke Blog: https://rennnosukesann.hatenablog.com  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/riita10069/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/riita10069/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/rytswd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/rytswd/</guid>
      <description>Ryota is the CTO of UPSIDER, Inc., a startup providing B2B payment services for businesses mainly in Japan. He has been focused on developing the company&amp;rsquo;s payment processing system and platform. He has built the platform embracing Kubernetes, Argo, Istio, and other Cloud Native technology to provide stable and resilient payment services. Prior to UPSIDER, Inc., he worked for several years as system support and software engineer in one of the world’s largest financial services companies.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/ryushi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/ryushi/</guid>
      <description>電通国際情報サービス（ISID）で働くソフトウェアエンジニアです。
ISIDにおけるソフトウェアの生産性と品質を両輪で向上するべく、様々な活動をしています。
 現代的な構成管理ツール（JiraやGitHub）の利用促進 テックブログの運営  個人的な活動は、さにあらず にて記録しています。
自分が普段使いするために作ったvscode-textlintは便利なので是非使ってみてください。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/sago35tk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/sago35tk/</guid>
      <description>仕事でも趣味でも Go 書いてる組込ソフトエンジニア。ここ最近は TinyGo プロジェクトの中の人として活動しています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/saicologic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/saicologic/</guid>
      <description>Webのバックエンド開発18年。今まで動的型付けRuby/Python/PHPを使った開発をしていましたが、2020年からGo言語を使った開発をメインにしています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/sivchari/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/sivchari/</guid>
      <description>Hello ✋, I&amp;rsquo;m sivchari. I am a university student and I am studying French at university. I love Go and Software Architecture, Design concept. I wanna make Go community more better ! Let&amp;rsquo;s enjoy Gopher life.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/thara/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/thara/</guid>
      <description>愛知県在住。
バックエンドエンジニアとして10年以上の経験があり、クラウドプラットフォーム上のスケーラブルなアーキテクチャの設計とアプリケーション開発に携わってきた。 特にモバイルゲーム開発においては、サーバーチームリードエンジニアとしてアーキテクチャ設計およびパフォーマンスチューニングを行い、DAU10万・総ダウンロード数1000万を超えるタイトルへの成長に貢献した。
フルリモートワークでのモバイルアプリ開発を経て、現在はメタバースプラットフォームのソフトウェアエンジニアに従事、プラットフォームの中心となるエンジン領域を担当。
ゲームを支えてきた技術がいかに他の領域を豊かにするかに関心がある他、未知の問題やステークホルダー/市場からの要求に対してフレキシブルに対応可能な開発組織の設計と構築にも興味がある。
最近の趣味は、Swift, Rust, Goなど色々な言語のファミコンエミュレータを実装すること。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/uji_rb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/uji_rb/</guid>
      <description>神戸のエンジニアです。業務ではRuby・TypeScriptを触っています。最近Solidityを勉強し始めました。Kyoto.goの共同運営をしてます。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/wwgt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/wwgt/</guid>
      <description>Women Who Go Tokyo は、サンフランシスコ発祥の女性とジェンダーマイノリティの人々があつまる Go 言語のコミュニティである Women Who Go の東京支部です。
当日は、14:00 ~ 16:00にRemo内の会場にてハンズオンを行います。 会場の場所については、会場案内をご覧ください。
ハンズオン内容の詳細はこちら
 On the day of the event, we will have a hands-on session from 14:00 to 16:00 at Remo. Please see Floor Guide for the location.
For more information about the hands-on, please see Details of the hands-on</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/yebis0942/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/yebis0942/</guid>
      <description>趣味でGoを触っています。好きな型はRune、好きなデザインパターンはCompositeパターンです。
Kyoto.goの共同運営メンバーで、たまにLTをしたりしています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/yoheimuta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/yoheimuta/</guid>
      <description>Goは protolint などの自作ツールを通じて日常的に書いてます。Contribution 待ってます 😁 業務では Go 製の OSS に PR を送ったり、以前は自社製プロダクトにも使ってました。主にバックエンドを中心に、システムを自分たちの制御下に置くために必要な仕事を担当してます。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/yosuke_moriya/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/yosuke_moriya/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/yuji_shimada/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/yuji_shimada/</guid>
      <description>バックエンドエンジニアとしてモバイルゲームの開発に携わっています。 「Goのノウハウ蓄積と共有」「Goエンジニアの交流」「Goの普及」を目的とした社内横断組織の運営も行なっています。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://gocon.jp/2022spring/ja/speakers/yyoshiki41/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/speakers/yyoshiki41/</guid>
      <description>Senior Software Engineer at LayerX Inc.
SaaS開発のバックエンドからフロントエンドまでを担当しています。 よくラジオやポッドキャストを聴いてます。</description>
    </item>
    
    <item>
      <title>database/sqlパッケージを理解する</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a8-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a8-s/</guid>
      <description>私たちはdatabase/sqlと好きなdatabaseのdriverをimportすることで、とても簡単にGoとdatabaseの通信をすることができるようになります。 とても便利ですが、なぜdatabaseのdriverはblank importをするだけでDBの種類を識別できているのでしょうか。 また、Goのdatabase/sqlはgoroutineで複数接続しても安全に処理することができますが、どのように制御しているのでしょうか。 このトークを聞くことにより、普段何気なく行っていたdatabase/sqlの仕組みを理解した上でアプリケーションを実装することができるようになります。</description>
    </item>
    
    <item>
      <title>Dissecting Slices, Maps and Channels in Go</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a3-l/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a3-l/</guid>
      <description>My talk is about how slices, maps and channels work in the Go runtime. The idea is to use unsafe to extract the memory state on runtime and analyze how that is changing over time when you operate with the slices, maps and channels. We will see how channel buffers or maps buckets work under the hood.</description>
    </item>
    
    <item>
      <title>Go Module with Microservices and Monorepo: Clear Dependencies with Ease of Development</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b11-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b11-s/</guid>
      <description>Go Module is certainly an integral part of the Go ecosystem today. But perhaps because of its relatively recent inception, it can be confusing how to integrate with some specific needs. In this talk, we&amp;rsquo;ll see how Go module can work extremely well with microservices and monorepo.</description>
    </item>
    
    <item>
      <title>Go runtime の歩き方</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt7/</guid>
      <description>ある程度 Go での開発経験をつむと、 goroutine や channel の動作原理を知るために Go の runtime パッケージのソースを読みたいことがあると思います。
しかし Go の runtime は plan9 ベースのアセンブリでの実装があったり、他ではあまり見かけない compiler directive を使用していたり、 所見だと built in 関数の名称がわからなかったり、前知識なしにコードが追いづらいです。
そこでこれらの解説や objdump で built in 関数を追う手法を紹介し、 runtime パッケージを読むための前提知識をまとめます。</description>
    </item>
    
    <item>
      <title>Go で RDB に SQL でアクセスするためのライブラリ Kra の紹介</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b7-l/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b7-l/</guid>
      <description>Go で PostgreSQL を使ったアプリケーションを実装する際に、単一のトランザクション内で通常の SQL を発行すると共に CopyFrom を使ったバルクインサートができるDBアクセスライブラリKraを紹介します。</description>
    </item>
    
    <item>
      <title>Go で始める将棋AI</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b13-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b13-s/</guid>
      <description>近年、将棋AIの実力は人間を凌駕するようになりました。 このセッションでは将棋AIのベースとなるアルゴリズムや将棋ソフトの実装で用いられるプロトコルなどを紹介し、私の実装をベースにそれらを Go で実装する方法を紹介します。</description>
    </item>
    
    <item>
      <title>Gopher, Chrome, Automation in 5min</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt6/</guid>
      <description>Go言語コミュニティには複数のGoogle Chromeの自動化ライブラリが存在しており、いずれも活発に開発が進められてきました。
このトークでは、
 https://github.com/chromedp/chromedp https://github.com/mafredri/cdp https://github.com/go-rod/rod  という3つの有力なライブラリを取り上げ、それぞれのAPIデザインの違いを紹介します。それを通して、
 自分のニーズに合ったChrome自動化ライブラリを選ぶ指針が得られる ブラウザ自動化という広く知られたトピックを通して「Goらしい」APIデザインの理解が深まる  ということをゴールとします。</description>
    </item>
    
    <item>
      <title>GoでAPI クライアントの実装</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a9-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a9-s/</guid>
      <description>HTTP APIクライアントの実践的な実装方法を紹介します。 外部HTTP APIの抽象化、使いやすいものにするためのノウハウを紹介したいと思います。</description>
    </item>
    
    <item>
      <title>GoとKubernetesを用いたバッチ開発のすすめ</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt5/</guid>
      <description>私の所属する会社では、多くのGoを採用する企業も同じように、APIなどのアプリケーションはほぼ全てGo言語で書かれており、Kubernetes上で管理されています。 そのため定期的に実行するバッチに関しても同じようにGoとKubernetesで管理したい！と思うようになり、元々Javaで書かれていたバッチの多くをGo言語で書くようになりました。その経験の中で得たGo言語でバッチを開発してKuberntes上で動かす手法やTipsを共有いたします。</description>
    </item>
    
    <item>
      <title>GoとLambdaを使用した高パフォーマンスでサーバレスなマイクロサービスの開発と運用</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a11-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a11-s/</guid>
      <description>2018年にAWSLambda上でgoランタイムが使えるようになってから3年がたちました。他のランタイムに比べてまだまだGoでの実装事例が少なく、Lambdaの開発に採用していいのか、他に比べてパフォマンスは良いのか気になる方がいるのではないでしょうか？実際にSendgridのメール配信のイベント結果をWebhookで収集した時の事例をお話します。</description>
    </item>
    
    <item>
      <title>GoのGC(garbage collector)について理解する</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a4-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a4-s/</guid>
      <description>GoのGCの仕組みや設計思想を解説します。 聴講者には、ランタイムの一機能であるGCについて触れてもらうことを通して、Goのランタイムの世界に興味をもってもらうことができます。</description>
    </item>
    
    <item>
      <title>Goの標準機能で簡易システムを低コストで作成するテクニック</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt1/</guid>
      <description>Goによるゲーム開発のプロジェクトにて、Go標準の機能を複数活用し、実装コストの低いデバッグツール開発基盤を作成しました。 本セッションのデバッグツールとは、動作確認やデバッグのため、ユーザーのレベル操作や所持アイテムの増減等、データの状態を操作・参照するAPI群、及びwebツールを指します。 デバッグツールの拡充は、ゲームに限らず様々な分野で成果物の品質に直結しますが、ドメイン固有のロジック実装に集中するためにはより低コストで開発できることが望ましいです。 本セッションでは、低コストで開発を行えるデバッグツール基盤をどのように実現したのかを紹介します。</description>
    </item>
    
    <item>
      <title>GoらしいAPIを求める旅路 並行処理編</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b9-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b9-s/</guid>
      <description>Goではユーザは簡単にgoroutineを作成して使用することができます。 逆にライブラリ提供者はオブジェクトを提供した際にどのメソッドでも簡単にgoキーワードをつけて実行されることを意識しないといけません。
このトークでは「Goらしく」そしてさらに「並行処理を意識した」APIを備えたライブラリのデザインをする際に考えることなどを紹介します。</description>
    </item>
    
    <item>
      <title>Go言語仕様輪読会の開催を通じた振り返り</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt8/</guid>
      <description>Go Language Specification輪読会と言う、Goの言語仕様を読む勉強会を1年半に渡って開催し、2021年12月についに仕様の最後まで読み終えることが出来ました。 この1年半までの間の活動や、メンバーによるGoの言語仕様への貢献、勉強会に伴って開発したツールの紹介を行います。 また、開催を続けるにあたって、うまくいったこと、あまりうまくいかなかったことについてお話しします。 リモート主体のコミュニティ活動の一例として参考にしていただければと思います。</description>
    </item>
    
    <item>
      <title>HTTP Tunneling in Go</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b10-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b10-s/</guid>
      <description>HTTP Tunneling can be used in situations similar to the requirements of using VPN, for example, to be able to access a localhost server from outside. This talk will introduce the specific implementation of HTTP tunneling and give audiences a deep knowledge of TCP and HTTP level implementation in Go.</description>
    </item>
    
    <item>
      <title>IoT with TinyGo</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b12-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b12-s/</guid>
      <description>昨今の組込分野では IoT というキーワードで つながるデバイス の魅力が高まっています。 つながるデバイス の場合、何らかのネットワークへの接続が必須となります。
このセッションでは TinyGo を用いた Go 言語による IoT 対応デバイス作成例を示し、他の環境 (例えば C/C++ 相当の環境である Arduino など) との違い、長所短所について説明します。 また、 Go は分かるが組込分野は分からない、難しそう、といった人の理解が一歩進むように手助けします。
以上により、誰でも TinyGo を使って IoT デバイスを作成出来るようになります。</description>
    </item>
    
    <item>
      <title>Let&#39;s contribute to OSS with Go</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a13-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a13-s/</guid>
      <description>I&amp;rsquo;ll talk about what I noticed when I contributed to Go OSS for the first time, and &amp;lsquo;Why&amp;rsquo; and &amp;lsquo;Why Not&amp;rsquo; contribute to OSS (in English).
The target audience is as follows - 1-2 year Go experience. Who has no contribution to OSS. Who want to contribute to OSS.</description>
    </item>
    
    <item>
      <title>lock free な doubly linked list を実装していたらいつのまにか concurrent skip list map を実装していたでござる</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b4-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b4-s/</guid>
      <description>埋め込み型のlinux kernel のようなdoubly linked list を実装しだしたら、lock free にしたくなり、そのまま sync.Map に勝つべく, hash map を実装していたらしらないうちに ほぼskip list なhash map を実装するまでの顛末</description>
    </item>
    
    <item>
      <title>Motto Go Forward Goを支える文化とコミュニティ 〜なぜ我々はコミュニティにコントリビュートするのか？〜</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b14-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b14-s/</guid>
      <description>まず最初にこのLTは技術の話ではありません。 Goは素晴らしいプログラミング言語ですが、それは技術だけが素晴らしいことを意味しません。 それを支える開発者、そして暖かく迎えてくれるコミュニティの存在と文化が大きく影響していると考えます。 コロナ禍によってさまざまなコミュニティが栄枯盛衰しているいまだからこそ、Goが大事にする文化を継承してもらいたいと考えました。 Go Worldがより進化し、変化していくために技術だけではないGoのウェットな文化を紹介させていただきます。</description>
    </item>
    
    <item>
      <title>Python製の姓名分割ライブラリをGoに移植した話</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt2/</guid>
      <description>一般的にわかち書きでは無い日本語で姓名から「姓＋名」の分割を行うことは困難です。 しかし、Python製の姓名分割ライブラリ(https://github.com/rskmoi/namedivider-python)を用いるとある程度精度良く分割は可能です。 そこでシングルバイナリで扱えるGoのメリットを活かして、Python製の姓名分割ライブラリをGoに移植した話をします。 その際移植で工夫した点や気をつけた点をお話します。</description>
    </item>
    
    <item>
      <title>testingパッケージを使ったWebアプリケーションテスト（単体テストからE2Eテストまで）</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a10-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a10-s/</guid>
      <description>ソフトウェアとテストは切っても切れない関係です。 いっぽう、Webアプリケーション開発においてはDBなどのミドルウェア・外部API・永続化情報の状態など様々な依存関係が存在します。 本セッションではDBや外部APIに依存するコードの単体テストからテスト中にWebサーバやDBを起動するシミュレーションテストまで、 私がtestingパッケージを使って行なっている様々なレベルのテストについて紹介します。</description>
    </item>
    
    <item>
      <title>The introduction of my way to learn Go together with Go community.</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a14-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a14-s/</guid>
      <description>I will share how I had chosen to learn Go together with my Go community, keeping in mind the advantages and disadvantages in each case, based on my learning curve from when I first started learning Go. I will explain the advantages and disadvantages in each case through practical experience.</description>
    </item>
    
    <item>
      <title>「自動コード生成ツール」を20分で作れるようになろう</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b8-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b8-s/</guid>
      <description>皆さんは、普段からGo言語でコードを書いていると思います。 「いつも同じようなプログラムだから自動生成したいな」と感じることはありませんか？
例えば、
 単にCRUDするだけのコード if err != nil 的なエラーハンドリング natsやKafkaからドメインイベントを取ってくるworker 副作用のないメソッドのユニットテスト  のようなものです。
スキーマ定義のみでCRUDするAPIを生成するジェネレータを作成したので、 コード生成をしたことない人向けに紹介したいと思います。
Keyword: ast, roche, jeniffer, cobra, afero</description>
    </item>
    
    <item>
      <title>オフィスアワー</title>
      <link>https://gocon.jp/2022spring/ja/sessions/_officehour/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/_officehour/</guid>
      <description></description>
    </item>
    
    <item>
      <title>オープニング</title>
      <link>https://gocon.jp/2022spring/ja/sessions/opening/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/opening/</guid>
      <description>オープニングトークです。</description>
    </item>
    
    <item>
      <title>クロージング</title>
      <link>https://gocon.jp/2022spring/ja/sessions/closing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/closing/</guid>
      <description>クロージングトークです。</description>
    </item>
    
    <item>
      <title>ゼロから作る Protocol Buffer のパーサーとレキサー</title>
      <link>https://gocon.jp/2022spring/ja/sessions/b3-l/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/b3-l/</guid>
      <description>インタプリタやコンパイラの基礎になる字句解析器（lexer）と構文解析器（parser）の実装はgoyaccなどのジェネレーターを使うか手書きするかの基本二択になります。goyaccに関する実践的な情報は多いですが学習カーブが伴います。私はProtocolBufferスキーマ定義ファイルのパーサーとレキサーをGoの標準パッケージだけで実装しました。ASTを標準出力するだけでなくVisitorパターンを導入すると使い勝手が増します。これらの知識は普段使う静的解析ツールのカスタマイズにも役立ちます。本セッションでは実際に動く最小構成の実装からはじめてGoでのプログラミング手法をご紹介します。</description>
    </item>
    
    <item>
      <title>ハンズオン〜GoとGCPで遊ぼう〜</title>
      <link>https://gocon.jp/2022spring/ja/sessions/handson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/handson/</guid>
      <description>14:00 ~ 16:00にRemo内の会場にてハンズオンを行います。 会場の場所については、会場案内をご覧ください。
ハンズオン内容の詳細はこちら
 We will have a hands-on session from 14:00 to 16:00 at Remo. Please see Floor Guide for the location.
For more information about the hands-on, please see Details of the hands-on</description>
    </item>
    
    <item>
      <title>メタバースを支える技術 ～UGCに溢れる3D空間のリアルタイム同期を支えるGo〜</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a6-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a6-c/</guid>
      <description>「メタバース」を実現するためには主にオンラインゲームで培われた3D空間のリアルタイム同期技術だけでなく、アバターやワールドなどのUGC、そしてワールドの中から別のワールドを創るといったメタバースならではの要件があります。
メタバースプラットフォーム「cluster 」では、これらの技術要件のバックエンド領域を一般的なWeb APIサーバーの他、リアルタイム通信サーバー・UGCパイプライン等が担っており、そのいずれもGoで開発されています。
このセッションでは、上記に挙げた要素技術の概略とそれらをいかにGoが支えているかについてお話しします。</description>
    </item>
    
    <item>
      <title>ランチ休憩</title>
      <link>https://gocon.jp/2022spring/ja/sessions/_lunch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/_lunch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>レガシーシステムをGoにリプレースした一年間の振り返り</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a5-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a5-c/</guid>
      <description>既存のシステムをリプレースするにあたっての、アーキテクチャや設計について紹介します。</description>
    </item>
    
    <item>
      <title>人間の直感に対応させた複雑度&lt;Cognitive Complexity&gt;の計測ツールをgo/astで実装してみよう</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a1-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a1-c/</guid>
      <description>Cognitive Complexity (認知的複雑度) というのは、プログラムの複雑さを測る指標の一つです。以前から使われてきた Cyclomatic Complexity (循環的複雑度) と比べて、人間の理解の難しさにフォーカスしたものであるという特徴があります。
今回の発表では、Go の標準ライブラリである、抽象構文木(AST)を扱うためのライブラリ(go/ast) を使って、どのように Cognitive Complexity の計測ツールを実装できるかについてお話します。静的解析ツールを作るときや go/ast を使うにあたって知っておいたほうが良い情報などについても触れる予定です。go/ast をまだ使ったことがない人が「ちょっと静的解析ツール作ってみような」と思えるようなお話ができればと思っています。</description>
    </item>
    
    <item>
      <title>休憩</title>
      <link>https://gocon.jp/2022spring/ja/sessions/_break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/_break/</guid>
      <description></description>
    </item>
    
    <item>
      <title>創業以来のPHPシステムが生み出した混沌をGoへの移行で乗り越えた話</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a2-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a2-c/</guid>
      <description>Yappliは2013年創業の、ノーコードでアプリを作成できるプラットフォームです。 当初サーバーサイドはフレームワークを使わない生のPHPで実装されており、重複コードが多い・テストコードがない・依存が複雑といった様々な問題を抱えおり、2018年よりGoへの移行を始めました。 しかし長年のPHP運用により、DBには大量のJSONカラム・数値型または空文字列を取り得るフィールド・フォーマットの違う時刻など数々の混沌が蔓延っていました。 本発表ではこれらを乗り越えたノウハウを紹介しつつ、またPHPからGoへの移行で組織的に感じられた恩恵についても共有します。</description>
    </item>
    
    <item>
      <title>型パラメータが使えるようになったのでLINQを実装してみた</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a12-s/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a12-s/</guid>
      <description>Go 1.18にて型パラメータ（ジェネリクス）が利用できるようになりました。（なったはずです、なりましたよね？） この新しい機能を利用してLINQ（言語統合クエリ）を実装してみます。
LINQは.Net Framework 3.5で導入された、様々なコレクションに対する操作を標準的な方法で行うための言語機能です。 C#やVB.Net以外にも、LINQの影響を受けたライブラリが様々な言語で作成されています。
この発表では、Goでの型パラメータを使ったLINQの実装方法を紹介することで、型パラメータの実践的な使い方とその制限について紹介します。</description>
    </item>
    
    <item>
      <title>外部コマンドの実行を含む関数のテスト</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt3/</guid>
      <description>Goではos/execが提供するCmd構造体が持つRun()メソッドを通じて簡単に外部コマンドを実行することが可能です。この処理をテスト時にモックに差し替える方法について様々なアプローチがありますが、標準パッケージ(os/exec_test.go)が実践していた方法がとても面白いと思いました。テスト実行時にテスト自身のバイナリを利用して外部コマンドの実行だけをモック化し、任意の結果を返すexec.Cmd構造体を作成する方法（トリック？）について説明し、それを応用して実際にユニットテストをしてみた話をしたいと思います。</description>
    </item>
    
    <item>
      <title>大規模ゲーム開発におけるContext活用パターン</title>
      <link>https://gocon.jp/2022spring/ja/sessions/lt4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/lt4/</guid>
      <description>GoのContextではリクエストスコープの値を伝播する事ができます。 主な利用例として認証トークンを伝搬させる手法がありますが、ゲーム開発においては他にも様々なContextの利用方法があります。
このトークでは大規模ゲーム開発で利用しているContextの活用パターンについてお話しします。 Contextを活用することで、DBアクセス頻度を少なくしたり、レスポンスサイズを小さくする工夫ができたため、その実装手法を共有します。</description>
    </item>
    
    <item>
      <title>懇親会</title>
      <link>https://gocon.jp/2022spring/ja/sessions/_after-party/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/_after-party/</guid>
      <description></description>
    </item>
    
    <item>
      <title>高速で統一的な自動生成ツールをprotocプラグインとして実装した話</title>
      <link>https://gocon.jp/2022spring/ja/sessions/a7-l/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://gocon.jp/2022spring/ja/sessions/a7-l/</guid>
      <description>Go言語には総称型が実装されていないためコードを自動生成して賄うことが多いです。
ここで自動生成のソースをGo言語自体とした場合、よくある手法としてreflectパッケージによる生成が行われますが、ソースが多いと実効速度がネックとなってしまいます。 また、StructTagを活用したオプション設定は便利ですが、文字列による設定なのでタイプミスも発生します。
そこでProtocolBuffersをソースとする自動生成ツールをprotocプラグインとして実装することで、オプションを型安全にしつつ実行速度を大幅に向上させることに成功しました。 今回はこのprotocプラグインを紹介します。</description>
    </item>
    
  </channel>
</rss>
